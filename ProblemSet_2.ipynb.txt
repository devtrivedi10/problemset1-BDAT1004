{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e77a51a6",
   "metadata": {},
   "source": [
    "                                             Problem Set 2 BBDAT 1002\n",
    "                                              STUDENT ID: 200515722\n",
    "                                               NAME: Dev Trivedi"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1de9336",
   "metadata": {},
   "source": [
    "## Question 1\n",
    "\n",
    "Consider the following Python module:\n",
    "a = 0\n",
    "def b():\n",
    "global a\n",
    "a = c(a)\n",
    "def c(a):\n",
    "return a + 2\n",
    "After importing the module into the interpreter, you execute:\n",
    "b()\n",
    "b()\n",
    "b()\n",
    "a\n",
    "?\n",
    "What value is displayed when the last expression (a) is evaluated? Explain your answer by indicating what happens in every executed statement."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0b34c0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 0\n",
    "def b():\n",
    "    global a\n",
    "    a = c(a) \n",
    "def c(a):\n",
    "    return a + 2 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7aa9fb7",
   "metadata": {},
   "source": [
    "# Explanation\n",
    "Every steps 2 is added\n",
    "b() then a is 0 + 2 = 2, \n",
    "b() then a is 2 + 2 = 4, \n",
    "b() then a is 4 + 2 = 6, \n",
    "a was eventually 6."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b3bdeed",
   "metadata": {},
   "source": [
    "# Question 2\n",
    "\n",
    "Function fileLength(), given to you, takes the name of a file as input and returns the length of the file. Modify function fileLength() so that a friendly message is printed instead."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b9ba1487",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "123\n",
      "File length.txt not found.\n"
     ]
    }
   ],
   "source": [
    "def file_length(file_name):\n",
    "    \n",
    "    try:\n",
    "        file = open(file_name)\n",
    "        \n",
    "    except FileNotFoundError:\n",
    "        print(\"File \" +file_name+\" not found.\")\n",
    "    \n",
    "    else:\n",
    "        file = open(file_name)\n",
    "        contents = file.read()\n",
    "        file.close()\n",
    "        print(len(contents))\n",
    "        \n",
    "file_length(\"filelength.txt\")\n",
    "file_length(\"length.txt\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3bb5b79",
   "metadata": {},
   "source": [
    "# Question 3\n",
    "\n",
    "write a class named Kangaroo as a subclass of Marsupial that inherits all the attributes of Marsupial and also:\n",
    "a. extends the Marsupial in it constructor to take, as input, the coordinates x and y of the Kangaroo object,\n",
    "b. supports method jump that takes number values dx and dy as input and moves the kangaroo by dx units along the x-axis and by dy units along the yaxis,\n",
    "c. overloads the str operator so it behaves as shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "be2f721b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['doll', 'firetruck', 'kitten']\n",
      "I am a Kangaroo located at coordinates (0,0)\n",
      "['doll', 'firetruck', 'kitten']\n",
      "I am a Kangaroo located at coordinates (3,0)\n"
     ]
    }
   ],
   "source": [
    "#1\n",
    "\n",
    "class Marsupial:\n",
    " \n",
    "    def __init__(self):\n",
    "        self.lst = []\n",
    " \n",
    "    def put_in_pouch(self, item):\n",
    "        self.lst.append(item)\n",
    " \n",
    "    def pouch_contents(self):\n",
    "        return self.lst\n",
    "    \n",
    "mar = Marsupial()\n",
    "mar.put_in_pouch('doll')\n",
    "mar.put_in_pouch('firetruck')\n",
    "mar.put_in_pouch('kitten')\n",
    "print(mar.pouch_contents())\n",
    "\n",
    "#2\n",
    "\n",
    "class Kangaroo(Marsupial):\n",
    " \n",
    "    def __init__(self, x, y):\n",
    "        Marsupial.__init__(self)\n",
    "        self.x = x\n",
    "        self.y = y\n",
    " \n",
    "    def jump(self, dx, dy):\n",
    "        self.x += dx\n",
    "        self.y += dy\n",
    " \n",
    "    def __str__(self):\n",
    "        return 'I am a Kangaroo located at coordinates ({},{})'.format(self.x, self.y)\n",
    " \n",
    " \n",
    "k = Kangaroo(0, 0)\n",
    "print(k)\n",
    "k.put_in_pouch('doll')\n",
    "k.put_in_pouch('firetruck')\n",
    "k.put_in_pouch('kitten')\n",
    "print(k.pouch_contents())\n",
    "k.jump(1, 0)\n",
    "k.jump(1, 0)\n",
    "k.jump(1, 0)\n",
    "print(k)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dbda7ca",
   "metadata": {},
   "source": [
    "# Question 4\n",
    "\n",
    "Write function collatz() that takes a positive integer x as input and prints the \n",
    "Collatz sequence starting at x. A Collatz sequence is obtained by repeatedly applying \n",
    "this rule to the previous number x in the sequence:\n",
    "x = {\n",
    "𝑥/2 𝑖𝑓 𝑥 𝑖𝑠 𝑒𝑣𝑒𝑛3𝑥\n",
    "+1 𝑖𝑓 𝑥 𝑖𝑠 𝑜𝑑𝑑\n",
    "Your function should stop when the sequence gets to number 1. Your \n",
    "implementation must be recursive, without any loops"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9a2af0ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "16\n",
      "8\n",
      "4\n",
      "2\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "def collatz(x):\n",
    "    if x == 1:\n",
    "        print(1)\n",
    "    else:\n",
    "        while x != 1:\n",
    "            if x % 2 == 0:\n",
    "                x /= 2\n",
    "                print(int(x))\n",
    "            else:\n",
    "                x = (3*x)+1\n",
    "                print(int(x))\n",
    "\n",
    "collatz(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74ae3250",
   "metadata": {},
   "source": [
    "# Question 5\n",
    "\n",
    "Write a recursive method binary() that takes a non-negative integer n and prints the binary representation of integer n."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "636aeb98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "11\n",
      "1001\n"
     ]
    }
   ],
   "source": [
    "def binary(x):\n",
    "    if x == 0:\n",
    "        return 0\n",
    "    else:\n",
    "        return (x % 2 + 10 * binary(int(x // 2)))\n",
    "    \n",
    "print(binary(0))\n",
    "print(binary(1))\n",
    "print(binary(3))\n",
    "print(binary(9))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d3c9ed7",
   "metadata": {},
   "source": [
    "# Question 6\n",
    "\n",
    "Implement a class named HeadingParser that can be used to parse an HTML document, and retrieve and print all the headings in the document. You should implement your class as a subclass of HTMLParser, defined in Standard Library module html.parser. When fed a string containing HTML code, your class should print the headings, one per line and in the order in which they appear in the document. Each heading should be indented as follows: an h1 heading should have indentation 0, and h2 heading should have indentation 1, etc. Test your implementation using w3c.html."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "92037c34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "W3C Mission\n",
      " Principles\n"
     ]
    }
   ],
   "source": [
    "from html.parser import HTMLParser\n",
    " \n",
    "class HeadingParser(HTMLParser):\n",
    "    checkHeader = False\n",
    "    indentNo = 0\n",
    "    \n",
    "    def handle_starttag(self, t, attrs):\n",
    "        if t == \"h1\":\n",
    "            self.checkHeader = True\n",
    "            self.indentNo = 0\n",
    "        elif t == \"h2\":\n",
    "            self.checkHeader = True\n",
    "            self.indentNo = 1\n",
    "        elif t == \"h3\":\n",
    "            self.checkHeader = True\n",
    "            self.indentNo = 2\n",
    "        elif t == \"h4\":\n",
    "            self.checkHeader = True\n",
    "            self.indentNo = 3\n",
    "        elif t == \"h5\":\n",
    "            self.checkHeader = True\n",
    "            self.indentNo = 4\n",
    "        elif t == \"h6\":\n",
    "            self.checkHeader = True\n",
    "            self.indentNo = 5\n",
    "        else:\n",
    "            self.checkHeader = False\n",
    "            self.indentNo = 0\n",
    " \n",
    "    def handle_data(self, data):\n",
    "        if self.checkHeader:\n",
    "            space = \" \"*self.indentNo\n",
    "            print(\"%s%s\" % (space, data))\n",
    " \n",
    "    def handle_endtag(self, t):\n",
    "        if t in [\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"]:\n",
    "            self.checkHeader = False\n",
    " \n",
    " \n",
    "infile = open(\"w3c.html\")\n",
    "content = infile.read()\n",
    "infile.close()\n",
    "hp = HeadingParser()\n",
    "hp.feed(content)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca9ef63c",
   "metadata": {},
   "source": [
    "# Question 7\n",
    "\n",
    "Implement recursive function webdir() that takes as input: a URL (as a string) and non-negative integers depth and indent. Your function should visit every web page reachable from the starting URL web page in depth clicks or less, and print each web page's URL. As shown below, indentation, specified by indent, should be used to indicate the depth of a URL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "75f728e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "http://reed.cs.depaul.edu/lperkovic/one.html\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'httplib2' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [21]\u001b[0m, in \u001b[0;36m<cell line: 26>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     22\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m getlink(url):\n\u001b[0;32m     23\u001b[0m         webdir(i, depth\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, indent\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[1;32m---> 26\u001b[0m \u001b[43mwebdir\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mhttp://reed.cs.depaul.edu/lperkovic/one.html\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "Input \u001b[1;32mIn [21]\u001b[0m, in \u001b[0;36mwebdir\u001b[1;34m(url, depth, indent)\u001b[0m\n\u001b[0;32m     19\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m depth \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[0;32m     20\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m\n\u001b[1;32m---> 22\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[43mgetlink\u001b[49m\u001b[43m(\u001b[49m\u001b[43murl\u001b[49m\u001b[43m)\u001b[49m:\n\u001b[0;32m     23\u001b[0m     webdir(i, depth\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m, indent\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m)\n",
      "Input \u001b[1;32mIn [21]\u001b[0m, in \u001b[0;36mgetlink\u001b[1;34m(url)\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mgetlink\u001b[39m(url):\n\u001b[0;32m      4\u001b[0m     result \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m----> 5\u001b[0m     http \u001b[38;5;241m=\u001b[39m \u001b[43mhttplib2\u001b[49m\u001b[38;5;241m.\u001b[39mHttp()\n\u001b[0;32m      6\u001b[0m     status, response \u001b[38;5;241m=\u001b[39m http\u001b[38;5;241m.\u001b[39mrequest(url)\n\u001b[0;32m      8\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m url \u001b[38;5;129;01min\u001b[39;00m BeautifulSoup(response, parse_only\u001b[38;5;241m=\u001b[39mSoupStrainer(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124ma\u001b[39m\u001b[38;5;124m'\u001b[39m), features\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhtml.parser\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n",
      "\u001b[1;31mNameError\u001b[0m: name 'httplib2' is not defined"
     ]
    }
   ],
   "source": [
    "from bs4 import BeautifulSoup, SoupStrainer\n",
    "import httplib2\n",
    "\n",
    "def getlink(url):\n",
    "    result = []\n",
    "    http = httplib2.Http()\n",
    "    status, response = http.request(url)\n",
    " \n",
    "    for url in BeautifulSoup(response, parse_only=SoupStrainer('a'), features=\"html.parser\"):\n",
    "        if url.has_attr('href'):\n",
    "            if url['href'][:5] == \"http:\" or url['href'][:5] == \"https\":\n",
    "                result.append(url['href'])\n",
    " \n",
    "    return result\n",
    " \n",
    "def webdir(url, depth, indent):\n",
    " \n",
    "    print(indent*\" \" + url)\n",
    "\n",
    "    if depth == 0:\n",
    "        return\n",
    " \n",
    "    for i in getlink(url):\n",
    "        webdir(i, depth-1, indent+1)\n",
    " \n",
    " \n",
    "webdir(\"http://reed.cs.depaul.edu/lperkovic/one.html\", 2,0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0472696",
   "metadata": {},
   "source": [
    "# Question 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "edfe3cc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "Write SQL queries on the below database table that return:\n",
    "1, All the temperature data.\n",
    "2, All the cities, but without repetition.\n",
    "3, All the records for India.\n",
    "4, All the Fall records.\n",
    "5, The city, country, and season for which the average rainfall is between 200 and 400 millimeters.\n",
    "6, The city and country for which the average Fall temperature is above 20 degrees, in increasing temperature order.\n",
    "7, The total annual rainfall for Cairo.\n",
    "8, The total rainfall for each season."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75ca2894",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Answers:\n",
    "\n",
    "1, SELECT temperature from tablename;\n",
    "2, SELECT distinct city from tablename;\n",
    "3, SELECT * from tablename where country='India';\n",
    "4, SELECT * from tablename where season='Fall';\n",
    "5, SELECT city, country, season from tablename where rainfaill >= 200\n",
    "   and rainfall <= 400;\n",
    "6, SELECT city, country from tablename where temperature>20\n",
    "   order by temperature ASC;\n",
    "7, SELECT count(rainfall) from tablename where city='Cairo';\n",
    "8, SELECT rainfall, count(rainfall) from tablename \n",
    "   group by rainfall;"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00b0a3da",
   "metadata": {},
   "source": [
    "# Question 9\n",
    "Suppose list words is defined as follows: words = ['The', 'quick', 'brown', 'fox', 'jumps', 'over','the', 'lazy', 'dog'] Write list comprehension expressions that use list words and generate the following lists:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7f0d258c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['THE', 'QUICK', 'BROWN', 'FOX', 'JUMPS', 'OVER', 'THE', 'LAZY', 'DOG']\n",
      "['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n",
      "[3, 5, 5, 3, 5, 4, 3, 4, 3]\n",
      "[['THE', 'the', 3], ['QUICK', 'quick', 5], ['BROWN', 'brown', 5], ['FOX', 'fox', 3], ['JUMPS', 'jumps', 5], ['OVER', 'over', 4], ['THE', 'the', 3], ['LAZY', 'lazy', 4], ['DOG', 'dog', 3]]\n",
      "['quick', 'brown', 'jumps']\n"
     ]
    }
   ],
   "source": [
    "words = ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n",
    " \n",
    "l1 = [x.upper() for x in words]\n",
    "l2 = [x.lower() for x in words]\n",
    "l3 = [len(i) for i in words]\n",
    "l4 = [[x.upper(), x.lower(), len(x)] for x in words]\n",
    "l5 = [x.lower() for x in words if len(x) > 4]\n",
    " \n",
    "print(l1)\n",
    "print(l2)\n",
    "print(l3)\n",
    "print(l4)\n",
    "print(l5)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

